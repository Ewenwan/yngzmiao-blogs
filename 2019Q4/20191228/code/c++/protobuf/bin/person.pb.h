// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_person_2eproto__INCLUDED
#define PROTOBUF_person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_person_2eproto();
void protobuf_AssignDesc_person_2eproto();
void protobuf_ShutdownFile_person_2eproto();

class PhoneNumber;
class Address;
class Person;

enum PhoneType {
  MOBILE = 0,
  HOME = 1,
  WORK = 2
};
bool PhoneType_IsValid(int value);
const PhoneType PhoneType_MIN = MOBILE;
const PhoneType PhoneType_MAX = WORK;
const int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhoneType_descriptor();
inline const ::std::string& PhoneType_Name(PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhoneType_descriptor(), value);
}
inline bool PhoneType_Parse(
    const ::std::string& name, PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class PhoneNumber : public ::google::protobuf::Message {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneNumber& default_instance();

  void Swap(PhoneNumber* other);

  // implements Message ----------------------------------------------

  PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional .PhoneType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::PhoneType type() const;
  inline void set_type(::PhoneType value);

  // @@protoc_insertion_point(class_scope:PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* number_;
  int type_;
  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  void Swap(Address* other);

  // implements Message ----------------------------------------------

  Address* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string detail = 2;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 2;
  inline const ::std::string& detail() const;
  inline void set_detail(const ::std::string& value);
  inline void set_detail(const char* value);
  inline void set_detail(const char* value, size_t size);
  inline ::std::string* mutable_detail();
  inline ::std::string* release_detail();
  inline void set_allocated_detail(::std::string* detail);

  // @@protoc_insertion_point(class_scope:Address)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_detail();
  inline void clear_has_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* country_;
  ::std::string* detail_;
  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static Address* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // repeated string email = 4;
  inline int email_size() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 4;
  inline const ::std::string& email(int index) const;
  inline ::std::string* mutable_email(int index);
  inline void set_email(int index, const ::std::string& value);
  inline void set_email(int index, const char* value);
  inline void set_email(int index, const char* value, size_t size);
  inline ::std::string* add_email();
  inline void add_email(const ::std::string& value);
  inline void add_email(const char* value);
  inline void add_email(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& email() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_email();

  // repeated .PhoneNumber phone = 5;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 5;
  inline const ::PhoneNumber& phone(int index) const;
  inline ::PhoneNumber* mutable_phone(int index);
  inline ::PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::PhoneNumber >*
      mutable_phone();

  // optional .Address address = 6;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 6;
  inline const ::Address& address() const;
  inline ::Address* mutable_address();
  inline ::Address* release_address();
  inline void set_allocated_address(::Address* address);

  // @@protoc_insertion_point(class_scope:Person)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::RepeatedPtrField< ::std::string> email_;
  ::google::protobuf::RepeatedPtrField< ::PhoneNumber > phone_;
  ::Address* address_;
  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// ===================================================================


// ===================================================================

// PhoneNumber

// required string number = 1;
inline bool PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:PhoneNumber.number)
  return *number_;
}
inline void PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PhoneNumber.number)
}
inline ::std::string* PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PhoneNumber.number)
  return number_;
}
inline ::std::string* PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PhoneNumber.number)
}

// optional .PhoneType type = 2;
inline bool PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhoneNumber::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PhoneType PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:PhoneNumber.type)
  return static_cast< ::PhoneType >(type_);
}
inline void PhoneNumber::set_type(::PhoneType value) {
  assert(::PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PhoneNumber.type)
}

// -------------------------------------------------------------------

// Address

// optional string country = 1;
inline bool Address::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& Address::country() const {
  // @@protoc_insertion_point(field_get:Address.country)
  return *country_;
}
inline void Address::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:Address.country)
}
inline void Address::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:Address.country)
}
inline void Address::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Address.country)
}
inline ::std::string* Address::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Address.country)
  return country_;
}
inline ::std::string* Address::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Address::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Address.country)
}

// optional string detail = 2;
inline bool Address::has_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_detail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_detail() {
  if (detail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detail_->clear();
  }
  clear_has_detail();
}
inline const ::std::string& Address::detail() const {
  // @@protoc_insertion_point(field_get:Address.detail)
  return *detail_;
}
inline void Address::set_detail(const ::std::string& value) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detail_ = new ::std::string;
  }
  detail_->assign(value);
  // @@protoc_insertion_point(field_set:Address.detail)
}
inline void Address::set_detail(const char* value) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detail_ = new ::std::string;
  }
  detail_->assign(value);
  // @@protoc_insertion_point(field_set_char:Address.detail)
}
inline void Address::set_detail(const char* value, size_t size) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detail_ = new ::std::string;
  }
  detail_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Address.detail)
}
inline ::std::string* Address::mutable_detail() {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detail_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Address.detail)
  return detail_;
}
inline ::std::string* Address::release_detail() {
  clear_has_detail();
  if (detail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detail_;
    detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Address::set_allocated_detail(::std::string* detail) {
  if (detail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detail_;
  }
  if (detail) {
    set_has_detail();
    detail_ = detail;
  } else {
    clear_has_detail();
    detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Address.detail)
}

// -------------------------------------------------------------------

// Person

// required int32 id = 1;
inline bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Person.id)
}

// required string name = 2;
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:Person.name)
  return *name_;
}
inline void Person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Person.name)
}
inline void Person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.name)
}
inline ::std::string* Person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Person.name)
  return name_;
}
inline ::std::string* Person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.name)
}

// optional int32 age = 3;
inline bool Person::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:Person.age)
  return age_;
}
inline void Person::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:Person.age)
}

// repeated string email = 4;
inline int Person::email_size() const {
  return email_.size();
}
inline void Person::clear_email() {
  email_.Clear();
}
inline const ::std::string& Person::email(int index) const {
  // @@protoc_insertion_point(field_get:Person.email)
  return email_.Get(index);
}
inline ::std::string* Person::mutable_email(int index) {
  // @@protoc_insertion_point(field_mutable:Person.email)
  return email_.Mutable(index);
}
inline void Person::set_email(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Person.email)
  email_.Mutable(index)->assign(value);
}
inline void Person::set_email(int index, const char* value) {
  email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.email)
}
inline void Person::set_email(int index, const char* value, size_t size) {
  email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.email)
}
inline ::std::string* Person::add_email() {
  return email_.Add();
}
inline void Person::add_email(const ::std::string& value) {
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Person.email)
}
inline void Person::add_email(const char* value) {
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Person.email)
}
inline void Person::add_email(const char* value, size_t size) {
  email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Person.email)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Person::email() const {
  // @@protoc_insertion_point(field_list:Person.email)
  return email_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Person::mutable_email() {
  // @@protoc_insertion_point(field_mutable_list:Person.email)
  return &email_;
}

// repeated .PhoneNumber phone = 5;
inline int Person::phone_size() const {
  return phone_.size();
}
inline void Person::clear_phone() {
  phone_.Clear();
}
inline const ::PhoneNumber& Person::phone(int index) const {
  // @@protoc_insertion_point(field_get:Person.phone)
  return phone_.Get(index);
}
inline ::PhoneNumber* Person::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:Person.phone)
  return phone_.Mutable(index);
}
inline ::PhoneNumber* Person::add_phone() {
  // @@protoc_insertion_point(field_add:Person.phone)
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PhoneNumber >&
Person::phone() const {
  // @@protoc_insertion_point(field_list:Person.phone)
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::PhoneNumber >*
Person::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:Person.phone)
  return &phone_;
}

// optional .Address address = 6;
inline bool Person::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Person::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Person::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Person::clear_address() {
  if (address_ != NULL) address_->::Address::Clear();
  clear_has_address();
}
inline const ::Address& Person::address() const {
  // @@protoc_insertion_point(field_get:Person.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::Address* Person::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::Address;
  // @@protoc_insertion_point(field_mutable:Person.address)
  return address_;
}
inline ::Address* Person::release_address() {
  clear_has_address();
  ::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void Person::set_allocated_address(::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:Person.address)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PhoneType>() {
  return ::PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_person_2eproto__INCLUDED
